// <auto-generated />
using System;
using Fanfix.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fanfix.Migrations
{
    [DbContext(typeof(FanfixDbContext))]
    [Migration("20250909224652_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fanfix.Models.Fanfic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CreatorID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatorID");

                    b.ToTable("Fanfics");
                });

            modelBuilder.Entity("Fanfix.Models.ReadingList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CreatorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("ReadingLists");
                });

            modelBuilder.Entity("Fanfix.Models.ReadingListFanfic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("FanficID")
                        .HasColumnType("int");

                    b.Property<int>("ReadingListID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FanficID");

                    b.HasIndex("ReadingListID");

                    b.ToTable("ReadingListFanfic");
                });

            modelBuilder.Entity("Fanfix.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AccCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Fanfix.Models.Fanfic", b =>
                {
                    b.HasOne("Fanfix.Models.User", "Creator")
                        .WithMany("Fanfics")
                        .HasForeignKey("CreatorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Fanfix.Models.ReadingList", b =>
                {
                    b.HasOne("Fanfix.Models.User", null)
                        .WithMany("ReadingLists")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Fanfix.Models.ReadingListFanfic", b =>
                {
                    b.HasOne("Fanfix.Models.Fanfic", "Fanfic")
                        .WithMany()
                        .HasForeignKey("FanficID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Fanfix.Models.ReadingList", "ReadingList")
                        .WithMany()
                        .HasForeignKey("ReadingListID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fanfic");

                    b.Navigation("ReadingList");
                });

            modelBuilder.Entity("Fanfix.Models.User", b =>
                {
                    b.Navigation("Fanfics");

                    b.Navigation("ReadingLists");
                });
#pragma warning restore 612, 618
        }
    }
}
